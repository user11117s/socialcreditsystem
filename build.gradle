plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    // id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'com.array64'
version = '1.0.3'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly 'net.luckperms:api:5.4'
    implementation 'redis.clients:jedis:6.0.0'
}

tasks {
  runServer {
    // Configure the Minecraft version for our task.
    // This is the only required configuration besides applying the plugin.
    // Your plugin's jar (or shadowJar if present) will be used automatically.
    minecraftVersion("1.21")
  }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

/* shadowJar {
    relocate 'redis.clients.jedis', 'com.array64.socialCredit.shadow.redis.clients.jedis'
    archiveClassifier.set("")
} */

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
}

static def packJar(Jar task, String classifier, sourcePath) {
    task.archiveBaseName.set('SocialCredit-API')
    task.archiveClassifier.set(classifier)
    task.from(sourcePath) {
        include 'com/array64/socialCredit/api/**'
        include 'com/array64/socialCredit/SocialCredit.*'
    }
}

tasks.register('sourcesJar', Jar) {
    packJar it, 'sources', sourceSets.main.allSource // Why do we have pronouns in this language?
}

tasks.register('apiJavadocJar', Jar) {
    dependsOn javadoc
    packJar it, 'javadoc', javadoc.destinationDir
}

tasks.register('apiJar', Jar) {
    packJar it, '', sourceSets.main.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

artifacts {
    archives apiJar
    archives sourcesJar
    archives apiJavadocJar
}

jar.configure {
    enabled = false
}